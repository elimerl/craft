import './App.svelte.css.proxy.js';
/* src/App.svelte generated by Svelte v3.35.0 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	space,
	text,
	transition_in,
	transition_out
} from "../_snowpack/pkg/svelte/internal.js";

import { bind } from "../_snowpack/pkg/svelte/internal.js";
import Item from "./components/Item.svelte.js";
import { fuse, search as _itemSearch } from "./core/index.js";
import { mcData } from "./core/util.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[16] = list[i];
	return child_ctx;
}

// (62:8) {#if mouseInInput}
function create_if_block(ctx) {
	let each_1_anchor;
	let current;
	let each_value_1 = /*autocomplete*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*search, autocomplete, Object, mcData*/ 9) {
				each_value_1 = /*autocomplete*/ ctx[3];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (63:10) {#each autocomplete as autocompleteItem}
function create_each_block_1(ctx) {
	let div;
	let item;
	let t0;
	let t1_value = /*autocompleteItem*/ ctx[16] + "";
	let t1;
	let t2;
	let current;
	let mounted;
	let dispose;

	function func(...args) {
		return /*func*/ ctx[8](/*autocompleteItem*/ ctx[16], ...args);
	}

	item = new Item({
			props: {
				item: Object.values(mcData.items).find(func)?.name,
				size: 16
			}
		});

	function mousedown_handler() {
		return /*mousedown_handler*/ ctx[9](/*autocompleteItem*/ ctx[16]);
	}

	return {
		c() {
			div = element("div");
			create_component(item.$$.fragment);
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			attr(div, "class", "svelte-wacbv0");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(item, div, null);
			append(div, t0);
			append(div, t1);
			insert(target, t2, anchor);
			current = true;

			if (!mounted) {
				dispose = listen(div, "mousedown", mousedown_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const item_changes = {};
			if (dirty & /*autocomplete*/ 8) item_changes.item = Object.values(mcData.items).find(func)?.name;
			item.$set(item_changes);
			if ((!current || dirty & /*autocomplete*/ 8) && t1_value !== (t1_value = /*autocompleteItem*/ ctx[16] + "")) set_data(t1, t1_value);
		},
		i(local) {
			if (current) return;
			transition_in(item.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(item.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(item);
			if (detaching) detach(t2);
			mounted = false;
			dispose();
		}
	};
}

// (84:6) {#each ingredients as item}
function create_each_block(ctx) {
	let li;
	let item;
	let t;
	let current;
	let mounted;
	let dispose;

	item = new Item({
			props: {
				item: /*item*/ ctx[13].item.name,
				count: /*item*/ ctx[13].count
			}
		});

	function click_handler() {
		return /*click_handler*/ ctx[10](/*item*/ ctx[13]);
	}

	return {
		c() {
			li = element("li");
			create_component(item.$$.fragment);
			t = space();
			attr(li, "class", "svelte-wacbv0");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			mount_component(item, li, null);
			append(li, t);
			current = true;

			if (!mounted) {
				dispose = listen(li, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const item_changes = {};
			if (dirty & /*ingredients*/ 2) item_changes.item = /*item*/ ctx[13].item.name;
			if (dirty & /*ingredients*/ 2) item_changes.count = /*item*/ ctx[13].count;
			item.$set(item_changes);
		},
		i(local) {
			if (current) return;
			transition_in(item.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(item.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(li);
			destroy_component(item);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let div2;
	let div1;
	let input;
	let t0;
	let div0;
	let t1;
	let p;
	let t2;
	let t3;
	let ul;
	let current;
	let mounted;
	let dispose;
	let if_block = /*mouseInInput*/ ctx[4] && create_if_block(ctx);
	let each_value = /*ingredients*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div3 = element("div");
			div2 = element("div");
			div1 = element("div");
			input = element("input");
			t0 = space();
			div0 = element("div");
			if (if_block) if_block.c();
			t1 = space();
			p = element("p");
			t2 = text(/*message*/ ctx[2]);
			t3 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(input, "autocomplete", "off");
			attr(input, "type", "text");
			attr(input, "placeholder", "Search...");
			attr(input, "class", "svelte-wacbv0");
			attr(div0, "class", "autocomplete-items svelte-wacbv0");
			attr(div1, "class", "autocomplete svelte-wacbv0");
			attr(p, "class", "svelte-wacbv0");
			attr(ul, "class", "svelte-wacbv0");
			attr(div2, "class", "svelte-wacbv0");
			attr(div3, "class", "container svelte-wacbv0");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, div1);
			append(div1, input);
			set_input_value(input, /*search*/ ctx[0]);
			append(div1, t0);
			append(div1, div0);
			if (if_block) if_block.m(div0, null);
			append(div2, t1);
			append(div2, p);
			append(p, t2);
			append(div2, t3);
			append(div2, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "input", /*input_input_handler*/ ctx[7]),
					listen(input, "focus", /*inputonfocus*/ ctx[5]),
					listen(input, "blur", /*inputonblur*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*search*/ 1 && input.value !== /*search*/ ctx[0]) {
				set_input_value(input, /*search*/ ctx[0]);
			}

			if (/*mouseInInput*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*mouseInInput*/ 16) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div0, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*message*/ 4) set_data(t2, /*message*/ ctx[2]);

			if (dirty & /*search, ingredients*/ 3) {
				each_value = /*ingredients*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(if_block);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			if (if_block) if_block.d();
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let search = "wooden axe";
	let ingredients = itemSearch(search);
	let message = genMessage(search);
	let autocomplete = [];
	let mouseInInput = false;

	const inputonfocus = () => {
		$$invalidate(4, mouseInInput = true);
		console.log("focused");
	};

	const inputonblur = () => {
		$$invalidate(4, mouseInInput = false);
		console.log("unfocused");
	};

	function itemSearch(search) {
		const multiplier = parseInt(search.split("*")[1]) || 1;

		try {
			return _itemSearch(search.split("*")[0]).map(v => ({ ...v, count: v.count * multiplier }));
		} catch(error) {
			return [];
		}
	}

	function genMessage(search) {
		const multiplier = parseInt(search.split("*")[1]);

		try {
			const item = fuse.search(search.split("*")[0])[0].item.displayName;
			return `Materials you need for ${isNaN(multiplier) ? "1" : multiplier} ${item}${isNaN(multiplier) ? "" : "s"}:`;
		} catch(error) {
			return `Couldn't find that item!`;
		}
	}

	function input_input_handler() {
		search = this.value;
		$$invalidate(0, search);
	}

	const func = (autocompleteItem, v) => v.displayName === autocompleteItem;

	const mousedown_handler = autocompleteItem => {
		$$invalidate(0, search = autocompleteItem);
	};

	const click_handler = item => $$invalidate(0, search = item.item.displayName);

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*search*/ 1) {
			$: {
				$$invalidate(1, ingredients = itemSearch(search));
				$$invalidate(2, message = genMessage(search));
				$$invalidate(3, autocomplete = fuse.search(search.split("*")[0]).map(v => v.item.displayName).slice(0, 3));
			}
		}
	};

	return [
		search,
		ingredients,
		message,
		autocomplete,
		mouseInInput,
		inputonfocus,
		inputonblur,
		input_input_handler,
		func,
		mousedown_handler,
		click_handler
	];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;